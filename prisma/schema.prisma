// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roleuser {
  CUSTOMER
  ADMIN
}

enum Typeseat {
  ECONOMY
  BUSINESS
  FIRST
}

enum StatusTicket {
  PENDING 
  FAILED 
  SUCCESS
}

model User {
  id    String @id @default(cuid())
  name  String
  email String @unique
  password String
  passport String?
  role  Roleuser
  tickets Ticket[]
}

model Airplane {
  id    String @id @default(cuid())
  code  String @default("ABC-123")
  name  String
  image String
  flight Flight[]
}

model Flight {
  id        String @id @default(cuid())
  planeId   String
  plane   Airplane @relation(fields: [planeId], references: [id])
  departureDate DateTime
  departureCity String
  arrivalDate DateTime
  destinationCity String
  destinationCityCode String
  price Int
  seats Flightseat[]
  tickets Ticket[]
}

model Flightseat{
  id  String @id @default(cuid())
  flightId String
  flight Flight @relation(fields: [flightId],references: [id])
  seatNumber String
  isBooked Boolean? @default(false)
  type Typeseat
  Ticket Ticket?  
}

model Ticket {
  id    String @id @default(cuid())
  code  String @unique
  flightid  String
  flight  Flight @relation(fields: [flightid],references: [id])
  customerId String
  customer User@relation(fields: [customerId], references: [id])
  seatId String @unique
  seat Flightseat @relation(fields: [seatId], references: [id])
  bookingDate DateTime
  price BigInt
  status StatusTicket
  tokenMidtrans String?

}